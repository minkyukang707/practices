'머신러닝 실무 프로젝트'에서 발췌 (한빛 미디어) 

1.0 머신러닝 프로젝트 처음 시작하기 
머신러닝 프로젝트 -> 중요한 부분을 확실히 짚어야함 
머신러닝: 과거의 경험을 기반으로 새로운 데이터에 대한 예측을 주로 내리는 것 

1.1 머신러닝은 어떻게 동작하는가?

아직 알지 못하는 새로운 데이터에 대한 예측 -> 지도학습 

지도학습?
이미 알고 있는 데이터에 어떤 알고리즘을 적용, 입력 데이터와 출력 데이터 사이의 관계를 파악
그 결과(모델)을 이용해 새로운 데이터에 대한 예측을 수행 

학습단계: 기존 데이터의 입력과 출력의 관계를 파악
출력단계: 모델을 통해 새로운 입력 데이터에 대한 예측을 수행

1.2 머신러닝 프로젝트의 과정 
- 문제정의
- 머신러닝을 사용하지 않는 방법은 없는지 검토
- 시스템을 설계
- 사용할 알고리즘 선택
- 특징과 정답 데이터, 로그 설계
- 데이터 전처리
- 학습을 수행하고 파라미터 튜닝
- 시스템에 통합 

1,2과정이 제일 중요(전처리) 
사람이 답을 낼 수 없는 문제라면 기계가 풀도록 할 수도 없다 
머신러닝으로 해결 가능한 것과 그렇지 않은 것을 구분하는 능력이 필요 

1.2.1 문제 정의 
ex) 매상개선, 유료회원 증가, 생산비용 절감 (비즈니스목적) 
if 생산비용 절감이 목적 -> 수율을 개선 -> 머신러닝을 이용해 불량이 발생하는 원인 탐색 
=> 과정을 쪼개야한다 

ex) 사용자마다 추천 상품을 제시해 온라인 쇼핑몰 매출을 늘림 
소비전력을 예측하여 공장 전력소비 최정화에 활용 ...

1.2.2 머신러닝을 사용하지 않는 방법 검토하기
"머신러닝은 기술부채 중 이자율이 매우 높은 신용카드다"

머신러닝을 이용했을때에 어려움 :
1. 확률적인 부분이 있어 자동 테스트가 어렵다
2. 오래 운용하면 사용자 경향이 변해 입력 경향도 바뀐다
3. 처리 파이프라인이 복잡
4. 데이터 의존관계가 복잡
5. 실험 코드 혹은 파라미터가 포함되기 쉽다
6. 개발 시스템과 운영 시스템 간의 언어/프레임워크가 제각각이기 쉽다 

입력 경향이 변하면 심각한 문제가 됨
ex) 과거: 옥동자, 긍정적인 의미 / 자바, 지역 이름으로 인식 
현재: 옥동자, 부정적인 의미 / 자바, 프로그래밍 언어로 인식

사람이 모두 확인할 수 없는 대량의 데이터를 처리하므로 생각지 못한 예측 결과를 출력할 위험은 항상 존재

그럼 어떤 비즈니스 문제에 머신러닝을 적용하면 좋을까?
조건:
- 대량의 데이터에 대해 고속으로 안정된 판단을 내려야 함
- 예측 결과에 일정 수준의 오류가 용인 

조건에 맞는다면 MVP(최소기능제품)을 만든다. 
-> 고객가치를 창출할 수있는 최소한의 제품을 의미 

1.2.3 시스템설계
문제 정의 및 MVP검증이 끝난후에는 머신러닝 시스템을 설계해야한다. 
* 핵심 두가지 
- 예측 결과를 어떻게 이용할 것인가?
- 예측 오류의 영향을 어떻게 흡수할 것인가? 

100%완벽한 알고리즘은 없다. 항상 오류에 대비해야한다. 
실제 작업시 목표 성능과 포기 지점을 설정한다. 한번 개선을 시작하면 끝도 없기 때문에 구체적인 예측성능을 정한다. 

1.2.4 알고리즘 선택 
데이터 특성을 모름 => 군집화(비지도학습), 스캐터플롯 매트릭스로 시각화하여 문제 고민
데이터 양을 예상해보고 온라인 학습, 배치학습(batch)중 어느쪽이 적합한지 가늠

1.2.5 특징,정답 데이터, 로그 설계하기 
특징(feature)은 머신러닝의 예측 모델에 입력될 정보 
-> 입력 정보를 수치벡터로 만들어야 한다. 
범주형 변수는 더미변수로 변환 (labelencoder, onehotencoder)

정답 데이터: 정답 범주 레이블과 그 정답의 입력 데이터 쌍을 의미 

지도학습에서는 품질이 높은 정답 레이블을 얼마나 확보하느냐가 중요 

1.2.6 데이터 전처리 
누락값 처리, 이상치 처리, 정규화, 더미변수 변환 
텍스트 데이터는 단어별 빈도를 세거나 빈도가 낮은 단어를 제거 

1.2.7 학습 및 파라미터 튜닝 
첫단계: 로지스틱 회귀같은 비교적 간단한 알고리즘과 기존 라이브러리 및 프레임워크를 사용하여 간단한 예측 모델을 만듦 
-> 99.9%같은 아주 높은 성능이 나온다면 어딘가 실수가 있는지 의심해봐야함. 
-> 과적합일 가능성이 높음 

과적합? 
훈련 데이터에서만 성능이 좋고 처음 보는 데이터는 잘 예측하지 못함. 훈련 데이터에 테스트 데이터가 일부 섞이면서 발생하는 데이터 유출이 생긴 것 

과적합을 방지하려면? 
- 교차검증으로 파라미터를 튜닝 
- 규제화를 적용 
- 학습곡선을 살핌 

교차검증: 학습용 훈련데이터와 모델 검증용 검증 데이터를 분할. 이 과정을 반복하여 하이퍼 파라미터를 선택 

규제화: 모든 데이터를 정확하게 분류하는 대신, 약간 잘못 분류하는 데이터가 생기더라도 새로운 데이터를 더 적절히 처리하는 방법

학습곡선: 데이터 규모나 학습 반복 횟수에 따른 훈련 데이터와 검증 데이터의 손실값의 추이를 그래프로 그린 것 

1.2.8 시스템에 통합하기 
먼저 예측 성능과 그에 따른 비즈니스 성과를 모니터링
미리 사람이 작성한 데이터와 정답 레이블의 쌍으로 이뤄진 데이터셋을 이용하여 성능을 측정한다.

1.3 운영 시스템에서 발생하는 머신러닝 문제 대처방법 

머신러닝을 이용했을때에 어려움 :
1. 확률적인 부분이 있어 자동 테스트가 어렵다
2. 오래 운용하면 사용자 경향이 변해 입력 경향도 바뀐다
3. 처리 파이프라인이 복잡
4. 데이터 의존관계가 복잡
5. 실험 코드 혹은 파라미터가 포함되기 쉽다
6. 개발 시스템과 운영 시스템 간의 언어/프레임워크가 제각각이기 쉽다 

1. 사람이 직접 작성한 황금기준을 사용하여 예측성능을 모니터링한다 (1,2,4)
2. 예측 모델을 모듈화하여 알고리즘에 대한 A/B테스트를 실시한다(2)
3. 모델을 버전관리하여 언제든 원하는 시점으로 돌아갈 수 있도록 한다(4,5)
4. 데이터 처리 파이프라인 자체를 저장한다(3,5)
5. 개발 시스템과 운영 시스템 간의 언어/프레임워크를 일치시킨다 (6)

1.3.1 사람이 직접 작성한 황금기준을 사용하여 예측성능을 모니터링한다 (1,2,4)
미리 확보한 데이터와 그 정답을 이용해 예측 성능을 측정하고 이 성능의 추이를 모니터링
예측 성능에 문턱값 알림을 설정해두면 장기 운영 시의 입력 경향 변화를 쉽게 알아챌 수 있다. 

1.3.2 예측 모델을 모듈화하여 알고리즘에 대한 A/B테스트를 실시한다(2)
예측모델을 모듈화해두면 여러 모델을 병렬로 두고 바꿔가며 A/B 테스트를 할 수 있다 

1.3.3 모델을 버전관리하여 언제든 원하는 시점으로 돌아갈 수 있도록 한다(4,5)
이전 버전 모델로 롤백할 수 있도록 해야한다. 소스코드, 모델, 데이터 모두를 버전관리한다 

1.3.4 데이터 처리 파이프라인 자체를 저장한다(3,5)
전처리와 예측 모델 구축을 포함하여 데이터 처리 파이프라인 전체를 저장해둬야 한다. 

1.3.5 개발 시스템과 운영 시스템 간의 언어/프레임워크를 일치시킨다 (6)
하나의 언어로 사용하자

1.4 머신러닝 시스템을 성공적으로 운영하려면 
머신러닝 성공을 위해 갖춰야될 인품?
1. 제품에 대한 도메인 지식을 갖춘 사람
2. 통게와 머신러닝을 잘 아는 사람
3. 데이터 분석 인프라를 구축할 수 있는 엔지니어링 능력을 갖춘 사람 
4. 실패에 대한 위험을 짊어질 수 있는 책임자 

1.5 정리
- 해결하려는 문제에 대한 가설을 세우고 MVP를 만들어 개념검증을 최우선으로 한다
- 머신러닝 외의 방법으로 해결할 수 있다면, 이를 두려워하지 말라 
- 머신러닝에 적합한 문제인지 파악한다
- 예측 성능과 KPI모두를 모니터링하면서 꾸준히 개선해나간다

